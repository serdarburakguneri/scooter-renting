---
openapi: 3.0.3
info:
  title: Kernel
  description: Manages scooter registration and renting
  version: 1.0.0-SNAPSHOT
servers:
- url: http://localhost:8081
  description: Auto generated value
- url: http://0.0.0.0:8081
  description: Auto generated value
tags:
- name: Scooter
paths:
  /rent:
    post:
      tags:
      - Scooter
      summary: Rent a scooter
      description: Rent a scooter
      operationId: requestRenting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RentRequestDTO'
            examples:
              Rent a scooter:
                description: Rent a scooter.
                value:
                  scooterId: dd4b91ea-3b80-4961-9bc3-1d6bc7f3f7cf
                  userId: dd4b91ea-3b80-4961-9bc3-1d6bc7f3f7cf
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalHistoryDTO'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - SecurityScheme: []
  /scooter:
    get:
      tags:
      - Scooter
      summary: List all scooters
      description: List all scooters
      operationId: list
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScooterDTO'
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - SecurityScheme: []
    post:
      tags:
      - Scooter
      summary: Create a scooter
      description: Create a scooter
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScooterCreationDTO'
            examples:
              Create a scooter:
                description: Create a scooter.
                value:
                  serialNumber: ABC12345
                  brand: Bird
                  model: One
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScooterDTO'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - SecurityScheme: []
  /scooter/{id}:
    patch:
      tags:
      - Scooter
      summary: Patch a scooter
      description: Patch a scooter
      operationId: patchLicense
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScooterPatchDTO'
            examples:
              Patch a scooter:
                description: Patch a scooter.
                value:
                  batteryLevel: "99,999"
                  location:
                    latitude: "59.334591"
                    longitude: "18.063240"
                  status: IN_USE
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScooterDTO'
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
      - SecurityScheme: []
components:
  schemas:
    Date:
      format: date
      type: string
      example: 2022-03-10
    LocationDTO:
      type: object
      properties:
        latitude:
          type: string
        longitude:
          type: string
    RentRequestDTO:
      required:
      - scooterId
      type: object
      properties:
        scooterId:
          $ref: '#/components/schemas/UUID'
    RentalHistoryDTO:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        scooterId:
          $ref: '#/components/schemas/UUID'
        userId:
          type: string
        startDate:
          $ref: '#/components/schemas/Date'
        endDate:
          $ref: '#/components/schemas/Date'
        totalCost:
          type: number
    ScooterCreationDTO:
      required:
      - serialNumber
      - brand
      - model
      type: object
      properties:
        serialNumber:
          pattern: \S
          type: string
        brand:
          pattern: \S
          type: string
        model:
          pattern: \S
          type: string
    ScooterDTO:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        serialNumber:
          type: string
        brand:
          type: string
        model:
          type: string
        batteryLevel:
          type: number
        locationDTO:
          $ref: '#/components/schemas/LocationDTO'
        status:
          type: string
    ScooterPatchDTO:
      type: object
      properties:
        batteryLevel:
          type: number
        location:
          $ref: '#/components/schemas/LocationDTO'
        status:
          type: string
    UUID:
      format: uuid
      pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
      type: string
  securitySchemes:
    SecurityScheme:
      type: http
      description: Authentication
      scheme: bearer
      bearerFormat: JWT
